{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#adaptive-ui-documentation","title":"Adaptive UI Documentation","text":"<p>This is going to be the starting point for the public documentation </p>"},{"location":"developing-apps/","title":"Developping apps","text":"<p>This section will go through the different concepts involved in creating an application with the AdaptiveUI platform.</p>"},{"location":"developing-apps/app-structure/","title":"App structure","text":"<p>This page describes the file structure of any applications developed using AdaptiveUI.</p>"},{"location":"developing-apps/app-structure/#basic-structure","title":"Basic structure","text":"<p>This is the default structure, and should suit most simple use cases.</p> <p>Here is an overview diagram representing the most basic file structure of an app named <code>sample_app</code>, placed in the apps/ directory.</p> <pre><code>apps/\n\u251c\u2500\u2500 _custom-views/ # Special directory for custom view templates\n\u251c\u2500\u2500 sample_app/\n\u2502   \u251c\u2500\u2500 structure.sql\n\u2502   \u251c\u2500\u2500 procedure.sql (opt.)\n\u2502   \u2514\u2500\u2500 data/\n\u2502       \u2514\u2500\u2500 sampledata.sql (opt.)\n\u2514\u2500\u2500 ...\n</code></pre> <p>As you can guess, every sql file must be contained within a folder named after the name of the app.</p> <p>Warning</p> <p>Make sure that the name of the app folder is in lower case, as otherwise the platform might have some trouble matching it to the related application in the database.</p>"},{"location":"developing-apps/app-structure/#_custom-views-directory","title":"<code>_custom-views/</code> directory","text":"<p>This special directory contains template files for custom views that are configured to load their content from files. These files are not processed by the regular app loading mechanism but are instead handled by the <code>import-appconfig-from-json.sh</code> script when importing application configurations.</p> <p>To use a custom view template file: 1. Place your template file (e.g., <code>SampleCustomView.jsx</code>) in the <code>_custom-views/</code> directory 2. Configure the custom view in the platform with:    - Set \"Is loaded from file\" to <code>true</code>    - Set \"Template File Name\" to the filename (e.g., <code>SampleCustomView.jsx</code>)</p> <p>The platform will automatically load the template content from the file when importing configurations.</p>"},{"location":"developing-apps/app-structure/#structuresql","title":"<code>structure.sql</code>","text":"<p>This is where the structure of the application will be defined. The SQL code for defining the schema, and any table and views To be contained within the application should be written in here.</p> <p>This file is mandatory (for obvious reasons).</p>"},{"location":"developing-apps/app-structure/#proceduresql-optional","title":"<code>procedure.sql</code> (optional)","text":"<p>If your application requires some kind of logic under the form of functions, this is the place to define them.</p>"},{"location":"developing-apps/app-structure/#data-directory-optional","title":"<code>data/</code> directory (optional)","text":"<p>This is where any files containing sample data (and the statements to insert them in the database) should be located.</p>"},{"location":"developing-apps/app-structure/#advanced-structure","title":"Advanced structure","text":"<p>For more complicated applications which would benefit from being split across multiple files, you can go with the advanced structure.</p> <p>This requires to define a <code>build.json</code> file within the applications directory.</p>"},{"location":"developing-apps/app-structure/#buildjson","title":"<code>build.json</code>","text":"<p>Here is the structure of the <code>build.json</code> file:</p> build.json<pre><code>{\n    \"group_order\": [\"group1\", ... ],\n    \"groups\":[\n        {\n            \"name\": \"group1\",\n            \"build_order\": [\"file1.sql\", \"file2.sql\",...],\n            \"sample_data_order\": [\"data1.sql\", ...], //(1)!\n            \"ignore\": false //(2)!\n        },\n        ...\n    ]\n}\n</code></pre> <ol> <li>The sample data files should still be placed under the <code>/data</code> directory of the app.</li> <li><code>ignore</code> is optional and defaults to <code>false</code> if not specified</li> </ol> <p>where:</p> <p><code>group_order</code>: The order in which the <code>groups</code> are being loaded</p> <p><code>groups</code>: The list of groups, where a <code>group</code> is defined by:</p> <ul> <li><code>name</code>: The name of the group</li> <li><code>build_order</code>: The names of the sql defnition files belonging to the group, in order of execution</li> <li><code>sample_data_order</code>: The names of the sample data files belonging to the group, in order of execution</li> <li><code>ignore</code> (opt.): A flag to ignore a group during the build execution, even when specified in the <code>group_order</code></li> </ul> <p>Specifying the files in <code>build.json</code> allows for a better organization of your application definition files, by removing the need for specific nomenclature imposed by the basic structure, and the flexibily provided by defining sets of files as groups.</p> <p>Note</p> <p>If you do not define any <code>build.json</code> file, then the basic structure is assumed by default. Hence, in that case, it is important to follow the imposed structure.</p> <p>Here is a blank template for creating your <code>build.json</code> file:</p> build.json - template<pre><code>{\n  \"group_order\": [\"\"],\n  \"groups\": [\n    {\n      \"name\": \"\",\n      \"build_order\": [\"\"],\n      \"sample_data_order\": [\"\"],\n      \"ignore\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"developing-apps/important-concepts/","title":"Important concepts","text":"<p>This page goes over important concepts to keep in mind when developing applications on AdaptiveUI</p>"},{"location":"developing-apps/important-concepts/#postgresql","title":"PostgreSQL","text":"<p>AdaptiveUI considers that an application should only require minlmal programming knowledge to be built. This is why the large majority of the code you will have to write will be in PostgreSQL, which is widely accessible and documented.</p>"},{"location":"developing-apps/important-concepts/#an-application-is-a-schema","title":"An application is a schema","text":"<p>On the database level, 1 application = 1 database schema. This is important to keep in mind when designing your applications.</p> <p>Hence, an application (schema) will contain it's own set of tables, views, functions, etc.</p> <p>The platform supports having mutliple applications (schema) loaded at once, that can cross-reference each-other.</p>"},{"location":"developing-apps/main-script/","title":"Main script","text":"<p><code>main.sh</code> is your entry point to executing scripts for the platform. This page describes the different functionalities that it provides.</p>"},{"location":"developing-apps/main-script/#usage","title":"Usage","text":"<p>To use <code>main.sh</code>, open up a terminal in the root directory of the repository. Then, execute the script using the following syntax:</p> <pre><code>./main.sh &lt;COMMAND&gt; [args]\n</code></pre>"},{"location":"developing-apps/main-script/#commands","title":"Commands","text":""},{"location":"developing-apps/main-script/#init","title":"<code>init</code>","text":"<p>Sets up permissions for access to local folders mounted as docker volumes (namely <code>apps/</code> and <code>config/</code>) for Linux users.</p> <p>Should only be ran once.</p> <p>Usage:</p> <pre><code>./main.sh init\n</code></pre> <p>See Initializing the repository</p>"},{"location":"developing-apps/main-script/#up","title":"<code>up</code>","text":"<p>Starts all docker services in containers.</p> <p>If docker services are already running, it will stop them first, remove their containers, re-create them and start the services again.</p> <p>It also automatically attempts to pull any new version of the docker images it uses.</p> <p>Usage:</p> <pre><code>./main.sh up\n</code></pre> <p>Services include:</p> <ul> <li><code>db</code>: PostgreSQL database</li> <li><code>server</code>: PostREST (API)</li> <li><code>pgadmin</code>: PGAdmin web instance (http://localhost:5050)</li> <li><code>front-end</code>: AdaptiveUI web instance (http://localhost:8080)</li> <li><code>minio</code>: Minio (S3 storage)</li> </ul>"},{"location":"developing-apps/main-script/#down","title":"<code>down</code>","text":"<p>Stops all running docker services.</p> <p>Usage:</p> <pre><code>./main.sh down\n</code></pre>"},{"location":"developing-apps/main-script/#pull","title":"<code>pull</code>","text":"<p>Pulls the latest docker images.</p> <p>Usage:</p> <pre><code>./main.sh pull\n</code></pre>"},{"location":"developing-apps/main-script/#logs","title":"<code>logs</code>","text":"<p>Attaches the logs of the services to the terminal.</p> <p>Usage:</p> <pre><code>./main.sh logs [services]\n</code></pre> <p>Args:</p> <ul> <li><code>services</code> (opt.): The name of the docker service(s) to follow the logs for, separated by commas if multiple.</li> </ul>"},{"location":"developing-apps/main-script/#load-apps","title":"<code>load-apps</code>","text":"<p>Loads the applications specified in the arguments, or all applications within <code>apps/</code> if none specified.</p> <p>Usage:</p> <pre><code>./main.sh load-apps [--apps &lt;app_names&gt; [--groups &lt;group_names&gt;]]\n</code></pre> <p>Args:</p> <ul> <li><code>-a/--apps &lt;app_names&gt;</code> (opt): The name of the applications to load, separated by commas (without any whitespace) if multiple.</li> <li><code>-g/--groups &lt;group_names&gt;</code> (opt): The name of the group of files to load, separated by commas (without any whitespace) if multiple.  <p>The <code>--groups</code> option can only be used if a single app name is provided to the <code>--apps</code> argument. Also, if the specified application doesn't have a <code>build.json</code> file defined, the <code>--groups</code> option will be ignored.  </p> </li> </ul>"},{"location":"developing-apps/main-script/#drop-apps","title":"<code>drop-apps</code>","text":"<p>Drops the applications specified in the arguments, or all applications if none specified.</p> <p>Usage:</p> <pre><code>./main.sh drop-apps [--apps &lt;app_names&gt; [--groups &lt;group_names&gt;]]\n</code></pre> <p>Args:</p> <ul> <li><code>-a/--apps &lt;app_names&gt;</code> (opt): The name of the applications to load, separated by commas (without any whitespace) if multiple.</li> <li><code>-g/--groups &lt;group_names&gt;</code> (opt): The name of the group of files to load, separated by commas (without any whitespace) if multiple.  <p>The <code>--groups</code> option can only be used if a single app name is provided to the <code>--apps</code> argument. Also, if the specified application doesn't have a <code>build.json</code> file defined, the <code>--groups</code> option will be ignored.  </p> </li> </ul>"},{"location":"developing-apps/main-script/#reset-apps","title":"<code>reset-apps</code>","text":"<p>Reset the structure and data of the applications specified in the arguments, or all of them if not specified.</p> <p>Equivalent to a <code>drop</code> followed by a <code>load</code>.</p> <p>Usage:</p> <pre><code>./main.sh reset-apps [--apps &lt;app_names&gt; [--groups &lt;group_names&gt;]]\n</code></pre> <p>Args:</p> <ul> <li><code>-a/--apps &lt;app_names&gt;</code> (opt): The name of the applications to load, separated by commas (without any whitespace) if multiple.</li> <li><code>-g/--groups &lt;group_names&gt;</code> (opt): The name of the group of files to load, separated by commas (without any whitespace) if multiple.  <p>The <code>--groups</code> option can only be used if a single app name is provided to the <code>--apps</code> argument. Also, if the specified application doesn't have a <code>build.json</code> file defined, the <code>--groups</code> option will be ignored.  </p> </li> </ul>"},{"location":"developing-apps/main-script/#reboot","title":"<code>reboot</code>","text":"<p>Resets everything in the database except the users.</p> <p>Usage:</p> <pre><code>./main.sh reboot\n</code></pre>"},{"location":"developing-apps/main-script/#lint","title":"<code>lint</code>","text":"<p>Lint all the sql files under <code>apps/</code> using <code>sqlfluff</code>.</p> <p>Usage:</p> <pre><code>./main.sh lint\n</code></pre>"},{"location":"developing-apps/main-script/#export","title":"<code>export</code>","text":"<p>Exports the app configuration and translation data to <code>configs/</code>.</p> <p>Usage:</p> <pre><code>./main.sh export\n</code></pre>"},{"location":"developing-apps/main-script/#import","title":"<code>import</code>","text":"<p>Imports the app configuration and translation data from <code>configs/</code>.</p> <p>The app configuration is imported from <code>/configs/latest</code>.</p> <p>The translation data is imported from <code>/configs/lang.json</code>.</p> <p>Usage:</p> <pre><code>./main.sh import\n</code></pre>"},{"location":"developing-apps/main-script/#sync-template","title":"<code>sync-template</code>","text":"<p>Synchronizes the current repo with the template repository.</p> <p>Usage:</p> <pre><code>./main.sh sync-template\n</code></pre> <p>Note: Uncommitted changes</p> <p>Make sure that you don't have any uncommitted changes. Otherwise, the command won't be able to proceed.</p>"},{"location":"developing-apps/repo-content/","title":"Repo content","text":"<p>This page describes the different components of the repository used to develop new applications, which are obtained from the template repository.</p>"},{"location":"developing-apps/repo-content/#apps-directory","title":"<code>apps/</code> directory","text":"<p>This is where all your application files should be located. This is the directory used by the platform in order to load the applications into the database.</p> <p>The <code>apps/_custom-views/</code> subdirectory is a special directory that contains template files for custom views that are configured to load their content from files. These files are automatically loaded when importing application configurations.</p> <p>see App structure</p>"},{"location":"developing-apps/repo-content/#configs-directory","title":"<code>configs/</code> directory","text":"<p>This is the directory used to import and export the platform's configuration. Any exported configuration will be located in a timestamped subdirectory. The latest exported configuration will also be included a subdirectory called <code>latest</code></p> <p>The <code>configs/latest/custom-views/</code> subdirectory contains exported template files for custom views that have been configured to load from files. When exporting configurations, any custom view with <code>is_loaded_from_file</code> set to true will have its template content saved to a separate file in this directory, using the filename specified in its <code>file_name</code> property.</p> <p>The <code>configs/</code> directory also used to import and export translation data from the platform, within a file <code>lang.json</code>.</p>"},{"location":"developing-apps/repo-content/#env-directory","title":"<code>env/</code> directory","text":"<p>This directory is meant to hold multiple environment variable files. However, right now, only the default <code>.env</code> file is supported and used.</p>"},{"location":"developing-apps/repo-content/#mainsh-script","title":"<code>main.sh</code> script","text":"<p>This is the main entrypoint script for executing any action related to the platform. Instructions on how to use it and the different commands available are described on the Main script page.</p> <p>Note: Other files / folders</p> <p>The other files and folders that are not mentioned can be ignored, as they are not meant to be accessed and used directly.</p>"},{"location":"developing-apps/sql-definition/procedures/","title":"Procedures","text":"<p>This page describes the process of defining procedures (<code>procedure.sql</code>) of an application.</p> <p>A word on the advanced structure</p> <p>Even though this page follows the basic structure, the principles explained are also relevant and applicable when using theadvancded structure.</p>"},{"location":"developing-apps/sql-definition/procedures/#postgres-functions-vs-procedures","title":"Postgres functions vs procedures","text":"<p>PostgreSQL makes a clear distinction between user-defined functions and procedures, even though both can usually be used to achieve the same results.</p> <p>Unfortunately, due to technical limitations of the API system that AdaptiveUI uses (PostgREST), only functions are supported. Hence, any form of callable procedure or function should be defined using PostgreSQL's  CREATE FUNCTION syntax.</p> <p>Those functions should be defined inside the <code>procedures.sql</code> files, and they should be defined in the application schema they belong.</p> <p>Here's an example of creating a <code>add_rental</code> function for our <code>library</code> application:</p> procedures.sql<pre><code>CREATE OR REPLACE FUNCTION app_library.add_rental()\nRETURNS VOID\nLANGUAGE SQL\nAS\n$$\n    -- This is the body of the function\n$$\n;\n</code></pre>"},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/","title":"Lookup table as comments","text":"<p>This doc explains how to configure a comments lookup table for a certain table on an app. </p>"},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/#instructions","title":"Instructions","text":""},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/#application-definition-structuresql","title":"Application definition (<code>structure.sql</code>)","text":"<ol> <li>In your application's <code>structure.sql</code>, find the table that you want to have the comments on (). Note its primary key .(). <li>Define your new comments table as the following:</li> <pre><code>CREATE TABLE IF NOT EXISTS &lt;schema_name&gt;.&lt;comments_table_name&gt; (\n    comment_id SERIAL PRIMARY KEY,\n    &lt;foreign_key_name&gt; INT,\n    body TEXT,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    username TEXT,\n    FOREIGN KEY (&lt;foreign_key_name&gt;) REFERENCES &lt;reference_schema_name&gt;.&lt;reference_table_name&gt;(&lt;reference_column_name&gt;)\n        ON DELETE CASCADE,\n    FOREIGN KEY (username) REFERENCES authentication.users(email) ON DELETE CASCADE\n);\n</code></pre> <p>Note that you need to replace anything in <code>&lt;&gt;</code> with the appropriate values.</p> <ol> <li>Add a comment to table  like such: <pre><code>COMMENT ON TABLE &lt;schema_name&gt;.&lt;comments_table_name&gt; IS 'COMMENTS_TABLE';\n</code></pre> <ol> <li>Reload the application into the platform using the dedicated script.</li> </ol>"},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/#platform-configuration","title":"Platform configuration","text":"<ol> <li>Head to <code>Settings</code>&gt;<code>Display</code>&gt;<code>&lt;reference_table_name&gt;</code>.</li> <li>Scroll down to the <code>Lookup tables</code> section.</li> <li>Enable (if not already enabled) the  lookup table by clicking on toggle button on the right side of the lookup table's name."},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/#example","title":"Example","text":""},{"location":"developing-apps/sql-definition/special-cases/comments-lookup-table/#application-definition-structuresql_1","title":"Application Definition (<code>structure.sql</code>)","text":"<pre><code>-- 1) Take note of the primary key\nCREATE TABLE app_crm.tasks (\n    task_id SERIAL PRIMARY KEY, -- &lt;---- Take this in note\n    description TEXT,\n    due_date DATE,\n    status VARCHAR(50),\n    assigned_to VARCHAR(255),\n    priority VARCHAR(50),\n    email_attachment UUID DEFAULT uuid_generate_v4(),\n    scanned_quote_paper UUID DEFAULT uuid_generate_v4()\n);\n\n-- 2) Define the comments table\nCREATE TABLE IF NOT EXISTS app_crm.tasks_comments (\n    comment_id SERIAL PRIMARY KEY,\n    task_id INT, -- &lt;--- Foreign key\n    body TEXT,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    username TEXT,\n    FOREIGN KEY (task_id) REFERENCES app_crm.tasks(task_id) ON DELETE CASCADE, -- &lt;--- Refers to app_crm.tasks.task_id\n    FOREIGN KEY (username) REFERENCES authentication.users(email) ON DELETE CASCADE\n);\n\n-- 3) Add a comment on the comments table\nCOMMENT ON TABLE app_crm.tasks_comments IS 'COMMENTS_TABLE';\n</code></pre>"},{"location":"developing-apps/sql-definition/special-cases/file-columns/","title":"File columns","text":"<p>AdaptiveUI provides you with the ability to define a tables' column to hold files.</p>"},{"location":"developing-apps/sql-definition/special-cases/file-columns/#pre-requisites","title":"Pre-requisites","text":"<p>To be able to use the file management features, the platform needs to be linked to an S3-compatible object storage server. This can be done by configuring the following application variables in <code>Settings</code> &gt; <code>Scripting</code> &gt; <code>App variables</code>:</p> <ul> <li><code>S3_URL</code>: The server's base endpoint.</li> <li><code>S3_ACCESS_KEY_ID</code>: An access key id of the S3 bucket provider.</li> <li><code>S3_SECRET_ACCESS_KEY</code>: The secret access key associated to <code>S3_ACCESS_KEY_ID</code>.</li> <li><code>S3_PROXY_URL</code> (opt.): The server's proxy url. Useful especially when running the platform locally so that the docker containers can reach each-other.</li> </ul> <p>Note: Dev environments</p> <p>On development environments, these application variables will already be pre-configured so that the platform is linked with the local MinIO instance.</p> <p>Then, to apply the changes made to the application variables, sync the database with your S3 provider by heading to <code>Settings</code> &gt; <code>File Manager</code> and pressing the button <code>Sync with S3</code>.</p>"},{"location":"developing-apps/sql-definition/special-cases/file-columns/#defining-the-file-columns","title":"Defining the file columns","text":"<p>For a column to hold files, it must be defined with the <code>UUID</code> data type.</p> <p>It must also be marked with the functional comment <code>MANAGED_FILES</code>.</p> <p>Here's an example of defining a file column <code>sample_pages</code> in the <code>books</code> table of our <code>library</code> app.</p> <p>```sql title={'structure.sql'}     -- ...</p> <pre><code>CREATE TABLE IF NOT EXISTS app_library.books (\nid SERIAL PRIMARY KEY,\ntitle TEXT NOT NULL,\nauthor TEXT NOT NULL,\npublished_date DATE NOT NULL,\ngenre TEXT,\ndescription TEXT,\n    sample_pages UUID -- This is a file column !\n);\n\nCOMMENT ON COLUMN app_library.books.title IS 'MANAGED_FILES';\n-- ...\n</code></pre> <p>```</p> <p>You're all set to upload / download some files with AdaptiveUI!</p>"},{"location":"developing-apps/sql-definition/special-cases/linking-tables/","title":"Linking tables","text":"<p>This doc explains how to configure a table as a linking table.</p> <p>A linking table is a table joining two separate tables into a many-to-many relationship. </p> <p>By configuring a table as a linking table, there will be a seamless connection between the two linked tables, as if they were directly connected. This is especially useful with lookup tables.</p>"},{"location":"developing-apps/sql-definition/special-cases/linking-tables/#instructions","title":"Instructions","text":""},{"location":"developing-apps/sql-definition/special-cases/linking-tables/#application-definition-structuresql","title":"Application definition (<code>structure.sql</code>)","text":"<ol> <li>In your application's <code>structure.sql</code>, find the table that you want to mark as a linking table.</li> <li>Add a comment to table  like such:</li> </ol> <pre><code>COMMENT ON TABLE &lt;schema_name&gt;.&lt;linking_table_name&gt; IS 'LINKING_TABLE';\n</code></pre> <ol> <li>Reload the application into the platform using the dedicated script.</li> </ol>"},{"location":"developing-apps/sql-definition/special-cases/linking-tables/#platform-configuration","title":"Platform configuration","text":"<p>No platform configuration is required.</p>"},{"location":"developing-apps/sql-definition/special-cases/linking-tables/#example","title":"Example","text":""},{"location":"developing-apps/sql-definition/special-cases/linking-tables/#application-definition-structuresql_1","title":"Application Definition (<code>structure.sql</code>)","text":"<pre><code>-- 1) Assuming task_leads is the linking table between table tasks and leads\nCREATE TABLE app_crm.task_leads (\n    task_id INTEGER REFERENCES app_crm.tasks(task_id),\n    lead_id INTEGER REFERENCES app_crm.leads(lead_id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (task_id, lead_id)\n);\nCOMMENT ON TABLE app_crm.task_leads IS 'LINKING_TABLE';\n</code></pre>"},{"location":"developing-apps/sql-definition/special-cases/tags-columns/","title":"Tags display type","text":"<p>This doc explains how to configure a column to display as tag(s) in the platform. </p>"},{"location":"developing-apps/sql-definition/special-cases/tags-columns/#instructions","title":"Instructions","text":""},{"location":"developing-apps/sql-definition/special-cases/tags-columns/#application-definition-structuresql","title":"Application definition (<code>structure.sql</code>)","text":"<ol> <li> <p>Define the table () that will display a column as tags: <pre><code>CREATE TABLE &lt;schema_name&gt;.&lt;table_name&gt; (\n&lt;column_1&gt; SERIAL PRIMARY KEY,\n[...]\n&lt;tags_column_name&gt; INT[] -- VERY IMPORTANT that the column is of type INT[]\n);\n</code></pre> <li> <p>Define the table () that will hold the possible tag values: <pre><code>CREATE TABLE &lt;schema_name&gt;.&lt;tags_table_name&gt; (\n&lt;tag_id_column_name&gt; SERIAL PRIMARY KEY,\nlabel TEXT NOT NULL,\ncolor TEXT\n);\n</code></pre> <li> <p>Add a comment to the column  to 'link' it to the : <pre><code>COMMENT ON COLUMN &lt;schema_name&gt;.&lt;table_name&gt;.&lt;tags_column_name&gt; IS 'TAG=&lt;tags_table_name&gt;.&lt;tag_id_column_name&gt;';\n</code></pre>"},{"location":"developing-apps/sql-definition/special-cases/tags-columns/#platform-configuration","title":"Platform configuration","text":"<p>No platform configuration required.</p>"},{"location":"developing-apps/sql-definition/special-cases/tags-columns/#example","title":"Example","text":""},{"location":"developing-apps/sql-definition/special-cases/tags-columns/#application-definition-structuresql_1","title":"Application Definition (<code>structure.sql</code>)","text":"<pre><code>-- 1) Define table with tags column\nCREATE TABLE app_crm.companies (\n    company_id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    industry VARCHAR(255),\n    size INT,\n    address TEXT,\n    operation_dates DATERANGE,\n    tags INT[] -- &lt;-- Tags column\n);\n\n-- 2) Define the tags table\nCREATE TABLE app_crm.tags (\n    tag_id SERIAL PRIMARY KEY, -- &lt;-- Tag id column\n    label TEXT NOT NULL,\n    color TEXT\n);\n\n-- 3) Add a comment on the tags column\nCOMMENT ON COLUMN app_crm.companies.tags IS 'TAG=tags.tag_id';\n</code></pre> <pre><code>\n</code></pre>"},{"location":"developing-apps/sql-definition/structure/","title":"Structure","text":"<p>This page describes the minimal requirements in the structure (<code>structure.sql</code>) of any application</p> <p>A word on the advanced structure</p> <p>Even though this page follows the basic structure, the principles explained are also relevant and applicable when using theadvancded structure.</p>"},{"location":"developing-apps/sql-definition/structure/#creating-the-schema","title":"Creating the schema","text":"<p>The first line of <code>structure.sql</code> should be creating the application's schema. However, there's a catch.</p> <p>Indeed, you should prefix the real name of your schema with <code>app_</code> when creating it. This syntax is what lets AdaptiveUI recognizes the schema as an application amongst the other schemas within the database.</p> <p>Here's an example of a creating a <code>library</code> app.</p> structure.sql<pre><code>CREATE SCHEMA IF NOT EXISTS app_library;\n</code></pre> <p>Note: A note on PostgreSQL syntax</p> <p>By the PostgreSQL convention, identifiers for database objects (schema, table, view, function, ...) should be written in lower case and with no blank spaces, where multiple words separated by an underscore <code>_</code>.</p> <p>Following the definition of the schema, you can define the relations of your applications (tables, view, ...). The next few sections will cover just that.</p>"},{"location":"developing-apps/sql-definition/structure/#creating-a-table","title":"Creating a table","text":"<p>When creating a table, it is important to include a numerical, auto-generated identifier column as the primary key. The column can be named as desired.</p> <p>The rest of the table can be designed as any other SQL table, though make sure to include any desired constraints such as foreign keys or on delete/update behavior.</p>"},{"location":"developing-apps/sql-definition/structure/#example","title":"Example","text":"<p>Here's an example where we define a simple table <code>books</code> for our sample <code>library</code> app:</p> structure.sql<pre><code>-- TABLES\nCREATE TABLE IF NOT EXISTS app_library.books (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    author TEXT NOT NULL,\n    published_date DATE NOT NULL,\n    genre TEXT,\n    description TEXT\n);\n</code></pre>"},{"location":"developing-apps/sql-definition/structure/#functional-comments","title":"Functional comments","text":"<p>PostgreSQL offers this wonderful feature called comments, which allow you to write special notes in the form of plain text on database objects. We take advantage of this feature to allow to specify extra information about the tables and their columns, which the platform will then parse to generate its layout. We call them functional comments.</p> <p>Each functional comment is usually in the form of a string in SCREAMING_SNAKE_CASE notation. Multiple functional comments can be added on a single database objects by separating them with spaces.</p>"},{"location":"developing-apps/sql-definition/structure/#req_on_create","title":"<code>REQ_ON_CREATE</code>","text":"<p>The <code>REQ_ON_CREATE</code> comment can be applied on columns to mark them as required when creating a new row from the platform. Any column which do not have this functional comment will be considered as optional.</p> <p>This functional comments adds a layer of flexibility by allowing to mark certain columns as \"mandatory\" without necessarily having to impose the constraint on the database level.</p>"},{"location":"developing-apps/sql-definition/structure/#example_1","title":"Example","text":"<p>Here's an example marking the required columns of the <code>books</code> table:</p> structure.sql<pre><code>-- ...books table definition\n\nCOMMENT ON COLUMN app_library.books.title IS 'REQ_ON_CREATE';\nCOMMENT ON COLUMN app_library.books.author IS 'REQ_ON_CREATE';\nCOMMENT ON COLUMN app_library.books.published_date IS 'REQ_ON_CREATE';\nCOMMENT ON COLUMN app_library.books.genre IS 'REQ_ON_CREATE';\n</code></pre> <p>In this case, <code>title</code>, <code>author</code>, <code>published_date</code> and <code>genre</code> will be required when creating a new <code>book</code> through the platform. <code>description</code> will remain optional.</p> <p>Note</p> <p><code>REQ_ON_CREATE</code> does not replace the <code>NOT NULL</code> constraint by any means. Both should be used together.</p>"},{"location":"developing-apps/sql-definition/structure/#display_field","title":"<code>DISPLAY_FIELD</code>","text":"<p>The <code>DISPLAY_FIELD</code> comment can be applied on a column to mark it as being the display field<sup>1</sup> of the table.</p> <p>This column will then be used across the platform whenever a row is identified (e.g. in Details view, Full view, etc. ). Hence, a meaningful and distinctive column is preferred for this role.</p> <p>The <code>DISPLAY_FIELD</code> functional comment is technically optional. If no column is marked with <code>DISPLAY_FIELD</code>, then the primary key column will be used as the display field. However, we strongly encourage to use it for an improved experience with the platform.</p> <p>Warning</p> <p>Only one column per table should be marked as <code>DISPLAY _FIELD</code>.</p>"},{"location":"developing-apps/sql-definition/structure/#example_2","title":"Example","text":"<p>Here's an example of marking the <code>title</code> column of the <code>books</code> table as the display field<sup>1</sup>:</p> structure.sql<pre><code>-- ...books table definition\n\nCOMMENT ON COLUMN app_library.books.title IS 'DISPLAY_FIELD'; -- (1)!\n</code></pre> <ol> <li>Column <code>title</code> has been chosen in this case because books can generally be identified by their title.</li> </ol>"},{"location":"developing-apps/sql-definition/structure/#disable_auto_display_type","title":"<code>DISABLE_AUTO_DISPLAY_TYPE</code>","text":"<p>By default, a column's display type will automatically be selected based on the column's data type within the database (for compatible data types only).</p> <p>The <code>DISABLE_AUTO_DISPLAY_TYPE</code> comment can be applied on a schema disable this functionality.</p>"},{"location":"developing-apps/sql-definition/structure/#example_3","title":"Example","text":"<p>Here's an example of disabling the auto display type feature for the <code>app_library</code> schema:</p> structure.sql<pre><code>CREATE SCHEMA IF NOT EXISTS app_library;\n\nCOMMENT ON SCHEMA app_library IS 'DISABLE_AUTO_DISPLAY_TYPE';\n</code></pre>"},{"location":"developing-apps/sql-definition/structure/#other-relations","title":"Other relations","text":"<p>Defining other relations such as views or sequences don't have any particular requirements to follow. They can be defined in the regular way.</p> <p>Display data from views</p> <p>Note that displaying data from views (with the exception of data sources for kpi dashboards) is not currently supported by the platform. However, we plan to support it in the future.</p>"},{"location":"developing-apps/sql-definition/structure/#all-together","title":"All together","text":"<p>Following is what the definition of the <code>books</code> table would actually look like, with everything combined:</p> structure.sql<pre><code>CREATE SCHEMA IF NOT EXISTS app_library;\n\n-- TABLES\nCREATE TABLE IF NOT EXISTS app_library.books (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    author TEXT NOT NULL,\n    published_date DATE NOT NULL,\n    genre TEXT,\n    description TEXT\n);\n\nCOMMENT ON COLUMN app_library.books.title IS 'REQ_ON_CREATE DISPLAY_FIELD';\nCOMMENT ON COLUMN app_library.books.author IS 'REQ_ON_CREATE';\nCOMMENT ON COLUMN app_library.books.published_date IS 'REQ_ON_CREATE';\nCOMMENT ON COLUMN app_library.books.genre IS 'REQ_ON_CREATE';\n</code></pre> <p>Order when combining comments</p> <p>When combining multiple functional comments into a single statement like with the <code>title</code> column in the example above, the order of the comments doesn't matter. Each functional comment is parsed separately and individually.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/initializing-the-repository/","title":"Initializing the repository","text":"<p>In order to develop apps on the platform, you will need to have a dedicated, separate repository. The following steps will guide you on how do setup everything properly with everything you'll need!</p>"},{"location":"getting-started/initializing-the-repository/#requirements","title":"Requirements","text":"<ul> <li>Git installed and configured properly</li> <li>An empty Git repository, created with your Git platform of choice, cloned on your machine</li> </ul>"},{"location":"getting-started/initializing-the-repository/#copy-the-template-into-the-new-repository","title":"Copy the template into the new repository","text":"<p>Open the root directory of your repo in a new terminal window. Then, execute the following commands:</p> <pre><code>git remote add -t main template https://github.com/AlbatrosServiceAgile/TemplateForApps.git\ngit remote set-url --push template DISALLOWED\ngit fetch template\ngit merge template/main --allow-unrelated-histories --squash --strategy-option theirs\ngit commit -m \"Merge remote-tracking branch 'template/main' from template repository\"\ngit push\n</code></pre> <p>The contents of the template repository should now be copied over to your new repository (and pushed).</p>"},{"location":"getting-started/initializing-the-repository/#setting-up-directories-permissions-linux-users-only","title":"Setting up directories permissions (Linux users only)","text":"<p>If you are using linux, some permissions needs to be setup in order for the <code>apps</code> and <code>configs</code> directories to behave properly. This can be done by running the following script:</p> <pre><code>./main.sh init\n</code></pre> <p>Note</p> <p>You will be prompted to enter your sudo password. This is to be able to make changes to the permissions and ownership of the <code>apps</code> and <code>configs</code> directories.</p> <p>After the script has ran, you'll have to close and re-open ALL VSCode (or other IDE) pages for it to pick-up on the permission changes. Simply reloading the VSCode window is not enough.</p>"},{"location":"getting-started/initializing-the-repository/#launch-the-platform","title":"Launch the platform","text":"<p>Run the following command to launch the platform: <pre><code>./main.sh up\n</code></pre></p> <p>Then, head to http://localhost:8080</p>"},{"location":"getting-started/initializing-the-repository/#next-steps","title":"Next steps","text":"<p>Congratulations! You are now all set to start developing some apps. </p> <p>Head to Developing apps to learn more about how to develop your own apps using the AdaptiveUI platform.</p>"},{"location":"miscellaneous/frontend-image/","title":"Tooling docker image","text":"<p>The tooling docker image allows to runs certain scripts onto the database.</p>"},{"location":"miscellaneous/frontend-image/#image-folder-structure","title":"Image folder structure","text":"<p>Here is a brief overview of the folder structure within the adaptive-ui-tooling docker image:</p> <pre><code>adaptiveui-tools/\n\u251c\u2500\u2500 apps (docker mount volume)/\n\u2502   \u2514\u2500\u2500 (empty)\n\u251c\u2500\u2500 configs (docker mount volume)/\n\u2502   \u2514\u2500\u2500 (empty)\n\u2514\u2500\u2500 extension/\n    \u251c\u2500\u2500 ext.sh\n    \u251c\u2500\u2500 shell-scripts/\n    \u2502   \u2514\u2500\u2500 *.sh (all the shell scripts)\n    \u2514\u2500\u2500 sql-scripts/\n        \u2514\u2500\u2500 *.sql (all the sql scripts)\n</code></pre> <p>The <code>/adaptiveui-tools/apps</code> and <code>/adaptiveui-tools/config</code> are docker volumes that mount to local directories within the app's repository.</p> <p><code>/adaptiveui-tools/apps</code> allows to provide app db definitions to the platform.</p> <p><code>/apps/configs</code> allows to manage the export configs / translation data, as well as see the output log files when running the scripts.</p>"},{"location":"miscellaneous/frontend-image/#shell-scripts-available","title":"Shell scripts available","text":"<p>Here is a list of the useful shell scripts available (located under <code>/adaptiveui-tools/extension/shell-scripts/</code>):</p> <ul> <li><code>export_all.sh</code> - Exports both the appconfig and the translations as json files to the config directory</li> <li><code>export-app-config-to-json.sh</code> - Exports the appconfig as json files within timestamped directory</li> <li><code>export-translations-to-json.sh</code> - Exports the translations as json file</li> <li><code>hard_reboot.sh</code> - Resets the database, including the <code>meta</code> schema as well as the application schemas (no effect on the users)</li> <li><code>import_all.sh</code> - Imports both the appconfig and the translations from json files from the config directory</li> <li><code>import-app-config-from-json.sh</code> - Imports appconfig from json files within a directory</li> <li><code>import-translationa-from-json.sh</code> - Imports translations from a json file</li> <li><code>lint_sql.sh</code> - Lints sql files under the provided directory</li> <li><code>refresh_apps.sh</code> - Resets the apps only</li> </ul>"},{"location":"miscellaneous/glossary/","title":"Glossary","text":"<ol> <li>Display field : Column of an application table that is used to visually identify a row within the platform.</li> </ol>"},{"location":"miscellaneous/templated-views/","title":"Templated views","text":"<p>The templated views work via HandlebarsJs templates, which is a superset of the Mustache templating system.</p> <p>Custom helpers have been defined to render the template more useful to the platform.</p>"},{"location":"miscellaneous/templated-views/#custom-helpers","title":"Custom helpers","text":""},{"location":"miscellaneous/templated-views/#rowsof-helper","title":"<code>rowsOf</code> helper","text":""},{"location":"miscellaneous/templated-views/#syntax","title":"Syntax","text":"<p><code>{{ (rowsOf '[schemaname.]&lt;tablename&gt;' [config='&lt;config_json_object&gt;'] [&lt;filtering_col_1&gt;=&lt;filtering_value_1&gt;...] ) }}</code></p> <p>Possible config:</p> <pre><code>{\n  \"orderBy\":\"&lt;col_name1&gt;,&lt;col_name_2&gt;\",\n  \"order\":\"asc\" | \"desc\", // Cannot be used without orderBy\n  \"count\":\"&lt;nb_of_rows&gt;\", // Number (used mainly for pagination)\n  \"offset\":\"&lt;offset_of_rows&gt;\", // Number (used mainly for pagination)\n  \"distinct\": true | false,\n  \"columnNames\": \"&lt;col_to_include_1&gt;,&lt;col_to_include_2&gt;...\"\n}\n</code></pre>"},{"location":"miscellaneous/templated-views/#functionality","title":"Functionality","text":"<p>Gets the rows from the table from  (only within the same schema as the custom view). <p>Row filtering is made possible from the attributes provided to the helper (see example).</p> <p>Cross-schema referencing is possible if specifying the name of the schema followed by a period right before the table name e.g. <code>app_1.table_1</code>. Otherwise, the schema considered will be the one in which the custom view is rendered.</p>"},{"location":"miscellaneous/templated-views/#usage","title":"Usage","text":"<p>Within <code>{{#each }} ... {{/each}}</code> helper block to iterate over the rows</p>"},{"location":"miscellaneous/templated-views/#example-standalone","title":"Example - standalone","text":"<pre><code>{{#each (rowsOf \"contacts\")}}\n&lt;div&gt;\n  &lt;h4&gt;contact {{this.contact_id}}&lt;/h4&gt;\n  &lt;p&gt;{{this.first_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.last_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.email}}&lt;/p&gt;\n  &lt;p&gt;{{this.phone}}&lt;/p&gt;\n  &lt;p&gt;{{this.company_id}}&lt;/p&gt;\n  &lt;p&gt;{{this.address}}&lt;/p&gt;\n  &lt;p&gt;{{this.position}}&lt;/p&gt;\n&lt;/div&gt;\n{{/each}}\n</code></pre>"},{"location":"miscellaneous/templated-views/#example-with-filtering","title":"Example - with filtering","text":"<pre><code>{{#each (rowsOf \"contacts\" contact_id=2)}}\n&lt;div&gt;\n  &lt;h4&gt;contact {{this.contact_id}}&lt;/h4&gt;\n  &lt;p&gt;{{this.first_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.last_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.email}}&lt;/p&gt;\n  &lt;p&gt;{{this.phone}}&lt;/p&gt;\n  &lt;p&gt;{{this.company_id}}&lt;/p&gt;\n  &lt;p&gt;{{this.address}}&lt;/p&gt;\n  &lt;p&gt;{{this.position}}&lt;/p&gt;\n&lt;/div&gt;\n{{/each}}\n</code></pre>"},{"location":"miscellaneous/templated-views/#example-with-config","title":"Example - with config","text":"<pre><code>{{#each (rowsOf \"contacts\" config='{\"order\":\"desc\", \"orderBy\":\"contact_id\"}')}}\n&lt;div&gt;\n  &lt;h4&gt;contact {{this.contact_id}}&lt;/h4&gt;\n  &lt;p&gt;{{this.first_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.last_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.email}}&lt;/p&gt;\n  &lt;p&gt;{{this.phone}}&lt;/p&gt;\n  &lt;p&gt;{{this.company_id}}&lt;/p&gt;\n  &lt;p&gt;{{this.address}}&lt;/p&gt;\n  &lt;p&gt;{{this.position}}&lt;/p&gt;\n&lt;/div&gt;\n{{/each}}\n</code></pre>"},{"location":"miscellaneous/templated-views/#action-helper","title":"<code>action</code> helper","text":""},{"location":"miscellaneous/templated-views/#syntax_1","title":"Syntax","text":"<p><code>{{ action &lt;action_tag&gt; [&lt;primary_key&gt;=&lt;value&gt;] }}</code></p>"},{"location":"miscellaneous/templated-views/#functionality_1","title":"Functionality","text":"<p>Allows to map the action with tag  to the execution function of a button. <p>Optionally, for row-level execution functions, you can provide the primary key name and value as attributes to the helper.</p>"},{"location":"miscellaneous/templated-views/#usage_1","title":"Usage","text":"<p><code>&lt;button onclick=\"{{action 'i_am_a_tag'}}\"&gt;Do something&lt;/button&gt;</code></p>"},{"location":"miscellaneous/templated-views/#example-table-scoped-execution-functions","title":"Example - Table-scoped execution functions","text":"<pre><code>&lt;button onclick=\"{{action 'add_opportunity'}}\"&gt;Add Opportunity&lt;/button&gt;\n</code></pre>"},{"location":"miscellaneous/templated-views/#example-row-scoped-execution-functions","title":"Example - Row-scoped execution functions","text":"<pre><code>&lt;button onclick=\"{{action 'copy_contact' contact_id=this.contact_id }}\"&gt;\n  Copy\n&lt;/button&gt;\n</code></pre>"},{"location":"miscellaneous/templated-views/#openinrecordsview-helper","title":"<code>openInRecordsView</code> helper","text":""},{"location":"miscellaneous/templated-views/#syntax_2","title":"Syntax","text":"<p><code>{{ openInRecordsView tableName=\"&lt;table_name&gt;\" &lt;primary_key&gt;=&lt;value&gt; }}</code></p>"},{"location":"miscellaneous/templated-views/#functionality_2","title":"Functionality","text":"<p>Allows to provide to a button the capability of opening a certain row in the Record view. Especially useful when used in combination with the <code>rowsOf</code> helper.</p>"},{"location":"miscellaneous/templated-views/#usage_2","title":"Usage","text":"<p>Required to provide all necessary fields to minimally uniquely identify a row from the table (i.e. the table's primary key) <code>&lt;button onclick=\"{{openInRecordsView tableName=\"this_is_a_table_name\" id_1=this.id1}}\"&gt;Open in records view&lt;/button&gt;</code></p>"},{"location":"miscellaneous/templated-views/#example-combination-with-rowsof-helper","title":"Example - combination with <code>rowsOf</code> helper","text":"<pre><code>{{#each (rowsOf \"contacts\")}}\n&lt;div&gt;\n  &lt;h4&gt;contact {{this.contact_id}}&lt;/h4&gt;\n  &lt;p&gt;{{this.first_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.last_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.email}}&lt;/p&gt;\n  &lt;p&gt;{{this.phone}}&lt;/p&gt;\n  &lt;p&gt;{{this.company_id}}&lt;/p&gt;\n  &lt;p&gt;{{this.address}}&lt;/p&gt;\n  &lt;p&gt;{{this.position}}&lt;/p&gt;\n  &lt;button onclick=\"{{openInRecordsView tableName=\"contacts\" contact_id=this.contact_id}}\"&gt;Open in records view&lt;/button&gt;\n&lt;/div&gt;\n{{/each}}\n</code></pre>"},{"location":"miscellaneous/templated-views/#currentrow-helper","title":"<code>currentRow</code> helper","text":""},{"location":"miscellaneous/templated-views/#syntax_3","title":"Syntax","text":"<p><code>{{ (currentRow) }}</code></p>"},{"location":"miscellaneous/templated-views/#functionality_3","title":"Functionality","text":"<p>If the custom view is used as a tabbed panel in details view, it gives access to the fields of the selected row to the custom view. It will not work if the custom view is not displayed as a tabbed panel.</p>"},{"location":"miscellaneous/templated-views/#usage_3","title":"Usage","text":"<p>Within <code>{{#with }} ... {{/with}}</code> helper block.</p>"},{"location":"miscellaneous/templated-views/#example-standalone_1","title":"Example - standalone","text":"<pre><code>&lt;!-- Here, we suppose that the table on which the custom view is displayed as a tabbed panel is table contacts. --&gt;\n{{#with (currentRow)}}\n&lt;div&gt;\n  &lt;h4&gt;contact {{this.contact_id}}&lt;/h4&gt;\n  &lt;p&gt;{{this.first_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.last_name}}&lt;/p&gt;\n  &lt;p&gt;{{this.email}}&lt;/p&gt;\n  &lt;p&gt;{{this.phone}}&lt;/p&gt;\n  &lt;p&gt;{{this.company_id}}&lt;/p&gt;\n  &lt;p&gt;{{this.address}}&lt;/p&gt;\n  &lt;p&gt;{{this.position}}&lt;/p&gt;\n  &lt;button onclick=\"{{openInRecordsView tableName=\"contacts\" contact_id=this.contact_id}}\"&gt;Open in records view&lt;/button&gt;\n&lt;/div&gt;\n{{/with}}\n</code></pre>"},{"location":"miscellaneous/templated-views/#example-paired-with-rowsof-helper-related-tables","title":"Example - paired with <code>rowsOf</code> helper (related tables)","text":"<pre><code>&lt;!-- Here, we suppose that the table on which the custom view is displayed as a tabbed panel is table contacts. --&gt;\n{{#with (currentRow)}} {{#each (rowsOf \"activities\"\ncontact_id=this.contact_id)}}\n&lt;div\n  style=\"display: flex; flex-direction: column; border: solid; border-radius: 16px; padding: 8px \"\n&gt;\n  &lt;p&gt;{{this.date}}&lt;/p&gt;\n&lt;/div&gt;\n{{/each}} {{/with}}\n</code></pre>"},{"location":"platform/settings/views/kpi-dashboards/","title":"Kpi dasbhoard","text":"<p>Kpi dashboards allows you to visualize data coming from database views (data sources) in a pleasant and efficient way. They are fully customizable so that they can be tailored to any specific needs.</p>"},{"location":"platform/settings/views/kpi-dashboards/#dashboard-layout","title":"Dashboard layout","text":"<p>Each dashboard is made up of a 4 x 8 grid where widgets can be placed into. Each widget can be moved and sized as desired within the boundaries of the dashboard by a factor of 1 square tile (i.e. a cell within the grid).</p>"},{"location":"platform/settings/views/kpi-dashboards/#dashboard-configuration","title":"Dashboard configuration","text":"<p>Widgets can be added and configured through the kpi dashboard's context menu, accessible with a right click. The only actions that cannot be taken on the dashboard's interface directly are creating and deleting dashboards. Those can be perfomed through the dedicated settings menu, accessible in <code>Settings &gt; Views &gt; Kpi dashboards</code>.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-sources","title":"Data sources","text":"<p>A data source is a database view which has been configured in a specific way to be compliant with the kpi dashboard's requirements on loading data.</p>"},{"location":"platform/settings/views/kpi-dashboards/#requirements","title":"Requirements","text":"<p>To use a view as a data source, it should at least have 2 columns, where one of them holds numerical values. This is because the widgets use 2 columns from the view as follows:</p> <ul> <li>1 column for numerical data (<code>value_col</code>)</li> <li>1 column for labelling the data (<code>label_col</code>)</li> </ul>"},{"location":"platform/settings/views/kpi-dashboards/#configuring-a-view-as-a-data-source","title":"Configuring a view as a data source","text":"<p>To configure a view as being a data source, you have to add a database comment on the view like the following:</p> <pre><code>COMMENT ON VIEW &lt;schema_name&gt;.&lt;view_name&gt; IS 'KPI_DATA_SOURCE';\nCOMMENT ON COLUMN &lt;schema_name&gt;.&lt;view_name&gt;.&lt;numerical_values_column_name&gt; IS 'KPI_DATA_SOURCE_VALUES';\nCOMMENT ON COLUMN &lt;schema_name&gt;.&lt;view_name&gt;.&lt;labels_column_name&gt; IS 'KPI_DATA_SOURCE_LABELS';\n</code></pre> <p>where <code>&lt;schema_name&gt;</code>, <code>&lt;view_name&gt;</code>, <code>&lt;numerical_values_column_name&gt;</code>,<code>&lt;labels_column_name&gt;</code> have to be replaced with their actual values.</p> <p>Make sure that <code>&lt;numerical_values_column_name&gt;</code> and <code>&lt;labels_column_name&gt;</code> match the EXACT name of the columns from the view. Otherwise, the database won't detect it as a valid data source.</p>"},{"location":"platform/settings/views/kpi-dashboards/#multiple-data-sets","title":"Multiple data sets","text":"<p>For some widgets like the Bar Chart or the Line Chart, it may be desirable to plot more than 1 data set on the graph. This is supported, and requires that the <code>value_col</code> holds values of an array type. Then, the values at the same index in the array values across rows will be considered as one dataset.</p> <p>e.g.</p> <pre><code>    value_col   | label_col |\n----------------|-----------|----\n     [0 , 1]    |  'val 1'  |\n----------------|-----------|----\n     [2 , 3]    |  'val 2'  |\n----------------|-----------|----\n     [4 , 5]    |  'val 3'  |\n</code></pre> <p>In this example, the values <code>0, 2, 4</code> are considered to be in the same (first) data set, and <code>1, 3, 5</code> in the same (second) data set.</p>"},{"location":"platform/settings/views/kpi-dashboards/#widgets","title":"Widgets","text":"<p>A widget is a mini-view which displays data from a selected data source in a specific way.</p>"},{"location":"platform/settings/views/kpi-dashboards/#mandatory-configuration","title":"Mandatory configuration","text":"<p>For a widget to work, it needs a minimum of two things configured (both via the context menu):</p> <ul> <li>A data source</li> <li>A widget type</li> </ul>"},{"location":"platform/settings/views/kpi-dashboards/#generic-attributes-of-widgets","title":"Generic attributes of widgets","text":"<p>Each widget can have the following attributes:</p> <ul> <li>Title: title of the widget (displayed at the top)</li> <li>Commentary: commentary on the widget (displayed at the bottom)</li> <li>Color: main color of the widget</li> <li>Unit: unit of measure</li> </ul> <p>All attributes are configurable through the context menu of the kpi dashboard</p>"},{"location":"platform/settings/views/kpi-dashboards/#widget-types","title":"Widget Types","text":"<p>Here are catalogued all the available widget types:</p>"},{"location":"platform/settings/views/kpi-dashboards/#single-number-widget","title":"Single Number Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features","title":"Features","text":"<p>Displaying a single numerical value.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements","title":"Data source requirements","text":"<p>Requires the data source view to have at least 1 value (row). If the data source has more than one value, the first one will be picked and the rest will be discarded.</p> <p>This makes is possible to design the view so that it is ordered in such a way that the desirable value to display is always the first one being displayed.</p> <p>The configured label column is not used.</p>"},{"location":"platform/settings/views/kpi-dashboards/#text-list-widget","title":"Text List Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features_1","title":"Features","text":"<p>Displays all the values and label pairs from the data source in a vertical list</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements_1","title":"Data source requirements","text":"<p>No particular requirements or restrictions.</p>"},{"location":"platform/settings/views/kpi-dashboards/#gauge-widget","title":"Gauge Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features_2","title":"Features","text":"<p>Displays a value as a progress gauge.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements_2","title":"Data source requirements","text":"<p>Requires the data source view to have at least 1 value (row), but preferably 2. The first value is used as the actual value, whereas the second one is used as the total. If only one value is provided, then the first value will be considered over 100.</p> <p>The configured label column is not used.</p>"},{"location":"platform/settings/views/kpi-dashboards/#pie-chart-widget","title":"Pie Chart Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features_3","title":"Features","text":"<p>Displays all the values of the data source in a pie chart with a color gradient and labels on the outside of each slice.</p> <p>When hovering over a slice, a tooltip will display it's label and value.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements_3","title":"Data source requirements","text":"<p>No particular requirements or restrictions.</p>"},{"location":"platform/settings/views/kpi-dashboards/#bar-chart-widget","title":"Bar Chart Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features_4","title":"Features","text":"<p>Displays all the values of the data source in a bar chart where the values are written on the y-axis and the labels on the x-axis.</p> <p>When hovering over a bar, a tooltip will display it's label and value.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements_4","title":"Data source requirements","text":"<p>No particular requirements or restrictions.</p>"},{"location":"platform/settings/views/kpi-dashboards/#line-chart-widget","title":"Line Chart Widget","text":""},{"location":"platform/settings/views/kpi-dashboards/#features_5","title":"Features","text":"<p>Displays all the values of the data source in a line chart where the values are written on the y-axis and the labels on the x-axis.</p> <p>When hovering over a point, a tooltip will display it's label and value.</p>"},{"location":"platform/settings/views/kpi-dashboards/#data-source-requirements_5","title":"Data source requirements","text":"<p>No particular requirements or restrictions.</p>"}]}